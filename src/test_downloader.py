#!/usr/bin/env python3
"""
Tests pour le T√©l√©chargeur de S√©ances du Conseil d'√âtat VD

Ce module contient les tests unitaires pour v√©rifier le bon fonctionnement
du t√©l√©chargeur de s√©ances.
"""

import json
import tempfile
from pathlib import Path
from datetime import datetime
from .downloader import TelechargeurSeancesVD


def test_single_file_logging():
    """Test du nouveau syst√®me de logging avec un seul fichier JSON."""
    
    # Cr√©er un dossier temporaire pour les tests
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        print("=== Test du syst√®me de logging avec un seul fichier JSON ===")
        print(f"Dossier temporaire : {temp_path}")
        print()
        
        # Premier lancement - devrait cr√©er le fichier et ajouter toutes les s√©ances
        print("1. Premier lancement...")
        downloader1 = TelechargeurSeancesVD(output_folder=str(temp_path))
        result1 = downloader1.scrape_seances()
        
        if result1['success']:
            print(f"   ‚úÖ Succ√®s : {result1['total_count']} s√©ances totales, {result1['new_count']} nouvelles")
            
            # V√©rifier que le fichier existe
            seances_file = temp_path / "seances_conseil_etat.json"
            if seances_file.exists():
                print(f"   üìÅ Fichier cr√©√© : {seances_file}")
                
                # V√©rifier le contenu
                with open(seances_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    seances = data.get('seances', [])
                    print(f"   üìä {len(seances)} s√©ances dans le fichier")
                    
                    # V√©rifier que toutes les s√©ances ont une date de d√©couverte
                    seances_with_discovery = [s for s in seances if 'date_decouverte' in s]
                    print(f"   üïí {len(seances_with_discovery)} s√©ances avec date de d√©couverte")
                    
                    if seances:
                        first_seance = seances[0]
                        print(f"   üìÖ Premi√®re s√©ance : {first_seance['date']} - {first_seance['titre']}")
                        if 'date_decouverte' in first_seance:
                            print(f"   üîç D√©couverte le : {first_seance['date_decouverte']}")
        else:
            print(f"   ‚ùå √âchec : {result1.get('error', 'Erreur inconnue')}")
            return False
        
        print()
        
        # Deuxi√®me lancement - devrait ignorer les s√©ances existantes
        print("2. Deuxi√®me lancement (m√™me donn√©es)...")
        downloader2 = TelechargeurSeancesVD(output_folder=str(temp_path))
        result2 = downloader2.scrape_seances()
        
        if result2['success']:
            print(f"   ‚úÖ Succ√®s : {result2['total_count']} s√©ances totales, {result2['new_count']} nouvelles")
            
            if result2['new_count'] == 0:
                print("   ‚úÖ Aucune nouvelle s√©ance ajout√©e (comportement attendu)")
            else:
                print(f"   ‚ö†Ô∏è  {result2['new_count']} nouvelles s√©ances ajout√©es (inattendu)")
        else:
            print(f"   ‚ùå √âchec : {result2.get('error', 'Erreur inconnue')}")
            return False
        
        print()
        
        # Test avec ajout manuel d'une nouvelle s√©ance
        print("3. Test avec ajout manuel d'une nouvelle s√©ance...")
        
        # Lire le fichier existant
        with open(seances_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            seances = data.get('seances', [])
        
        # Ajouter une nouvelle s√©ance manuellement
        new_seance = {
            "url": "https://www.vd.ch/test/nouvelle-seance",
            "date": "2025-06-25",
            "date_originale": "25 juin 2025",
            "titre": "S√©ance du Conseil d'Etat du 25 juin 2025",
            "date_decouverte": datetime.now().isoformat()
        }
        seances.append(new_seance)
        
        # Sauvegarder le fichier modifi√©
        data['seances'] = seances
        data['metadonnees']['total_seances'] = len(seances)
        data['metadonnees']['derniere_mise_a_jour'] = datetime.now().isoformat()
        
        with open(seances_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"   üìù Nouvelle s√©ance ajout√©e manuellement")
        
        # Troisi√®me lancement - devrait d√©tecter la nouvelle s√©ance
        print("4. Troisi√®me lancement (apr√®s ajout manuel)...")
        downloader3 = TelechargeurSeancesVD(output_folder=str(temp_path))
        result3 = downloader3.scrape_seances()
        
        if result3['success']:
            print(f"   ‚úÖ Succ√®s : {result3['total_count']} s√©ances totales, {result3['new_count']} nouvelles")
            
            # V√©rifier que le nombre total est correct
            expected_total = result1['total_count'] + 1  # +1 pour la s√©ance ajout√©e manuellement
            if result3['total_count'] == expected_total:
                print(f"   ‚úÖ Nombre total correct : {result3['total_count']}")
            else:
                print(f"   ‚ö†Ô∏è  Nombre total incorrect : attendu {expected_total}, obtenu {result3['total_count']}")
        else:
            print(f"   ‚ùå √âchec : {result3.get('error', 'Erreur inconnue')}")
            return False
        
        print()
        print("=== Test termin√© avec succ√®s ===")
        return True


if __name__ == "__main__":
    success = test_single_file_logging()
    if success:
        print("üéâ Tous les tests ont r√©ussi !")
    else:
        print("‚ùå Certains tests ont √©chou√©.") 