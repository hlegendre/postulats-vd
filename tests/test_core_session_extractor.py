#!/usr/bin/env python3
"""
Tests pour l'Extracteur de Contenu des S√©ances du Conseil d'√âtat VD

Ce module contient les tests unitaires pour v√©rifier le bon fonctionnement
de l'extracteur de contenu des s√©ances.
"""

import tempfile
from pathlib import Path
from datetime import datetime
from unittest.mock import patch
from bs4 import BeautifulSoup

from postulats_vd.core.session_extractor import SessionExtractor, _parse_partie, _parse_seance
from postulats_vd.core.storage import Storage, Seance


def test_session_extractor_initialization():
    """Test de l'initialisation de l'extracteur de sessions."""

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        print("=== Test d'initialisation de l'extracteur de sessions ===")
        print(f"Dossier temporaire : {temp_path}")
        print()

        # Cr√©er un storage et un extracteur
        storage = Storage(output_folder=str(temp_path))
        extractor = SessionExtractor(storage)

        # V√©rifier que l'extracteur a √©t√© initialis√© correctement
        assert extractor.storage is not None, "Le storage n'a pas √©t√© initialis√©"
        assert extractor.html_fetcher is not None, "Le html_fetcher n'a pas √©t√© initialis√©"
        assert extractor.logger is not None, "Le logger n'a pas √©t√© initialis√©"

        print("   ‚úÖ Extracteur initialis√© correctement")
        print()


def test_parse_partie_with_valid_data():
    """Test de l'extraction d'une partie avec des donn√©es valides."""

    print("=== Test d'extraction d'une partie avec des donn√©es valides ===")
    print()

    # Cr√©er un HTML de test avec une partie valide
    test_html = """
    <div>
        <h2 class="heading">Titre de la partie</h2>
        <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=123">Document 1</a>
        <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=456">Document 2</a>
        <a href="/autre/lien">Lien ignor√©</a>
    </div>
    """

    soup = BeautifulSoup(test_html, "html.parser")
    partie = _parse_partie(soup)

    # V√©rifier que la partie a √©t√© extraite correctement
    assert partie is not None, "La partie devrait √™tre extraite"
    assert partie["titre"] == "Titre de la partie", "Le titre devrait √™tre correct"
    assert len(partie["fichiers"]) == 2, "Deux fichiers devraient √™tre trouv√©s"

    # V√©rifier les URLs des fichiers
    file_urls = [f["url"] for f in partie["fichiers"]]
    expected_urls = [
        "https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=123",
        "https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=456",
    ]
    for expected_url in expected_urls:
        assert expected_url in file_urls, f"URL attendue manquante : {expected_url}"

    print("   ‚úÖ Partie extraite correctement")
    print()


def test_parse_partie_without_h2():
    """Test de l'extraction d'une partie sans titre h2."""

    print("=== Test d'extraction d'une partie sans titre h2 ===")
    print()

    # Cr√©er un HTML de test sans h2
    test_html = """
    <div>
        <h3>Titre incorrect</h3>
        <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=123">Document 1</a>
    </div>
    """

    soup = BeautifulSoup(test_html, "html.parser")
    partie = _parse_partie(soup)

    # V√©rifier que la partie n'est pas extraite
    assert partie is None, "La partie ne devrait pas √™tre extraite sans h2"

    print("   ‚úÖ Partie ignor√©e correctement (pas de h2)")
    print()


def test_parse_seance_with_multiple_parts():
    """Test de l'extraction d'une s√©ance avec plusieurs parties."""

    print("=== Test d'extraction d'une s√©ance avec plusieurs parties ===")
    print()

    # Cr√©er un HTML de test avec plusieurs parties
    test_html = """
    <div id="main">
        <div class="col-md-12 pl-0 pr-0">
            <h2 class="heading">Partie 1</h2>
            <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=123">Document 1</a>
        </div>
        <div class="col-md-12 pl-0 pr-0">
            <h2 class="heading">Partie 2</h2>
            <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=456">Document 2</a>
            <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=789">Document 3</a>
        </div>
    </div>
    """

    soup = BeautifulSoup(test_html, "html.parser")
    parties = _parse_seance(soup)

    # V√©rifier que toutes les parties ont √©t√© extraites
    assert len(parties) == 2, "Deux parties devraient √™tre extraites"

    # V√©rifier la premi√®re partie
    assert parties[0]["titre"] == "Partie 1", "Le titre de la premi√®re partie devrait √™tre correct"
    assert len(parties[0]["fichiers"]) == 1, "La premi√®re partie devrait avoir 1 fichier"

    # V√©rifier la deuxi√®me partie
    assert parties[1]["titre"] == "Partie 2", "Le titre de la deuxi√®me partie devrait √™tre correct"
    assert len(parties[1]["fichiers"]) == 2, "La deuxi√®me partie devrait avoir 2 fichiers"

    print("   ‚úÖ S√©ance avec plusieurs parties extraite correctement")
    print()


def test_extract_seance_success():
    """Test de l'extraction r√©ussie d'une s√©ance."""

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        print("=== Test d'extraction r√©ussie d'une s√©ance ===")
        print(f"Dossier temporaire : {temp_path}")
        print()

        # Cr√©er un storage et un extracteur
        storage = Storage(output_folder=str(temp_path))
        extractor = SessionExtractor(storage)

        # Cr√©er une s√©ance de test
        test_seance: Seance = {
            "url": "https://www.vd.ch/test/seance",
            "date": "2025-01-01",
            "date_originale": "1er janvier 2025",
            "date_decouverte": datetime.now().isoformat(),
            "titre": "S√©ance du Conseil d'Etat du 1er janvier 2025",
            "parties": [],
        }

        # Mock du HTML fetcher pour retourner du contenu valide
        test_html = """
        <div id="main">
            <div class="col-md-12 pl-0 pr-0">
                <h2 class="heading">Partie 1</h2>
                <a href="https://sieldocs.vd.ch/ecm/app18/service/siel/getContent?ID=123">Document 1</a>
            </div>
        </div>
        """

        with patch.object(extractor.html_fetcher, "string", return_value=test_html):
            success = extractor.extract_seance(test_seance)

        # V√©rifier que l'extraction a r√©ussi
        assert success, "L'extraction de la s√©ance devrait r√©ussir"
        assert len(test_seance["parties"]) == 1, "La s√©ance devrait avoir 1 partie"
        assert test_seance["parties"][0]["titre"] == "Partie 1", "Le titre de la partie devrait √™tre correct"

        # V√©rifier que la s√©ance a √©t√© sauvegard√©e dans le storage
        saved_seance = storage.seances_get()[0]
        assert saved_seance["date"] == "2025-01-01", "La s√©ance devrait √™tre sauvegard√©e"

        print("   ‚úÖ S√©ance extraite et sauvegard√©e correctement")
        print()


def test_extract_all_seances_empty():
    """Test de l'extraction de toutes les s√©ances (cas vide)."""

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        print("=== Test d'extraction de toutes les s√©ances (cas vide) ===")
        print(f"Dossier temporaire : {temp_path}")
        print()

        # Cr√©er un storage et un extracteur
        storage = Storage(output_folder=str(temp_path))
        extractor = SessionExtractor(storage)

        # Tester avec aucune s√©ance
        result = extractor.extract_all_seances()

        # V√©rifier le r√©sultat
        assert result["success"], "L'extraction devrait r√©ussir m√™me sans s√©ances"
        assert result["nb_extracted"] == 0, "Aucune s√©ance ne devrait √™tre extraite"
        assert result["nb_error"] == 0, "Aucune erreur ne devrait survenir"
        assert result["nb_ignored"] == 0, "Aucune s√©ance ne devrait √™tre ignor√©e"

        print("   ‚úÖ Aucune s√©ance √† traiter (comportement attendu)")
        print()


if __name__ == "__main__":
    print("üß™ D√©marrage des tests de l'extracteur de sessions...")
    print()

    try:
        test_session_extractor_initialization()
        test_parse_partie_with_valid_data()
        test_parse_partie_without_h2()
        test_parse_seance_with_multiple_parts()
        test_extract_seance_success()
        test_extract_all_seances_empty()

        print("üéâ Tous les tests de l'extracteur de sessions ont r√©ussi !")

    except Exception as e:
        print(f"‚ùå Erreur lors des tests : {e}")
        raise
