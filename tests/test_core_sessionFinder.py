#!/usr/bin/env python3
"""
Tests pour le T√©l√©chargeur de S√©ances du Conseil d'√âtat VD

Ce module contient les tests unitaires pour v√©rifier le bon fonctionnement
du t√©l√©chargeur de s√©ances.
"""

import json
import tempfile
from pathlib import Path
from datetime import datetime
from postulats_vd.core.sessionfinder import CESessionFinder


def test_single_file_logging():
    """Test du nouveau syst√®me de logging avec un seul fichier JSON."""

    # Cr√©er un dossier temporaire pour les tests
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        print("=== Test du syst√®me de logging avec un seul fichier JSON ===")
        print(f"Dossier temporaire : {temp_path}")
        print()

        # Premier lancement - devrait cr√©er le fichier et ajouter toutes les s√©ances
        print("1. Premier lancement...")
        downloader1 = CESessionFinder(output_folder=str(temp_path))
        result1 = downloader1.scrape_seances()

        assert result1["success"], f"√âchec du premier lancement : {result1.get('error', 'Erreur inconnue')}"
        print(f"   ‚úÖ Succ√®s : {result1['stored_seances']} s√©ances totales, {result1['new_seances_count']} nouvelles")

        # V√©rifier que le fichier existe
        seances_file = temp_path / "storage.json"
        assert seances_file.exists(), "Le fichier storage.json n'a pas √©t√© cr√©√©"
        print(f"   üìÅ Fichier cr√©√© : {seances_file}")

        # V√©rifier le contenu
        with open(seances_file, "r", encoding="utf-8") as f:
            data = json.load(f)
            assert "seances" in data, "Le fichier storage.json doit contenir une cl√© 'seances'"
            seances = data.get("seances", [])
            assert isinstance(seances, list), "La valeur de 'seances' doit √™tre une liste"
            assert len(seances) > 0, "Aucune s√©ance trouv√©e dans le fichier"
            print(f"   üìä {len(seances)} s√©ances dans le fichier")

            # V√©rifier que toutes les s√©ances ont une date de d√©couverte
            seances_with_discovery = [s for s in seances if "date_decouverte" in s]
            assert len(seances_with_discovery) == len(
                seances
            ), "Toutes les s√©ances doivent avoir une date de d√©couverte"
            print(f"   üïí {len(seances_with_discovery)} s√©ances avec date de d√©couverte")

        print()

        # Deuxi√®me lancement - devrait ignorer les s√©ances existantes
        print("2. Deuxi√®me lancement (m√™me donn√©es)...")
        downloader2 = CESessionFinder(output_folder=str(temp_path))
        result2 = downloader2.scrape_seances()

        assert result2["success"], f"√âchec du deuxi√®me lancement : {result2.get('error', 'Erreur inconnue')}"
        assert result2["stored_seances"] == result1["stored_seances"], "Le nombre de s√©ances stock√©es doit √™tre le m√™me"
        assert result2["new_seances_count"] == 0, "Aucune nouvelle s√©ance doit √™tre ajout√©e"
        print(f"   ‚úÖ Succ√®s : {result2['stored_seances']} s√©ances totales, {result2['new_seances_count']} nouvelles")

        print()

        # Test avec ajout manuel d'une nouvelle s√©ance
        print("3. Test avec ajout manuel d'une nouvelle s√©ance...")

        # Lire le fichier existant
        with open(seances_file, "r", encoding="utf-8") as f:
            data = json.load(f)
            assert "seances" in data, "Le fichier storage.json doit contenir une cl√© 'seances'"
            seances = data.get("seances", [])
            assert isinstance(seances, list), "La valeur de 'seances' doit √™tre une liste"
            assert len(seances) > 0, "Aucune s√©ance trouv√©e dans le fichier"

        # Ajouter une nouvelle s√©ance manuellement
        new_seance = {
            "url": "https://www.vd.ch/test/nouvelle-seance",
            "date": "2025-06-25",
            "date_originale": "25 juin 2025",
            "titre": "S√©ance du Conseil d'Etat du 25 juin 2025",
            "date_decouverte": datetime.now().isoformat(),
        }
        seances.append(new_seance)

        # Sauvegarder le fichier modifi√©
        data["seances"] = seances
        data["metadonnees"]["stored_seances"] = len(seances)
        data["metadonnees"]["derniere_mise_a_jour"] = datetime.now().isoformat()

        with open(seances_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        print(f"   üìù Nouvelle s√©ance ajout√©e manuellement")

        # Troisi√®me lancement - devrait d√©tecter la nouvelle s√©ance
        print("4. Troisi√®me lancement (apr√®s ajout manuel)...")
        downloader3 = CESessionFinder(output_folder=str(temp_path))
        result3 = downloader3.scrape_seances()

        assert result3["success"], f"√âchec du troisi√®me lancement : {result3.get('error', 'Erreur inconnue')}"
        assert (
            result3["stored_seances"] == result1["stored_seances"] + 1
        ), "Le nombre de s√©ances stock√©es doit avoir augment√© de 1"
        assert result3["new_seances_count"] == 0, "Aucune nouvelle s√©ance doit √™tre ajout√©e"
        print(f"   ‚úÖ Succ√®s : {result3['stored_seances']} s√©ances totales, {result3['new_seances_count']} nouvelles")

        print()
        print("=== Test termin√© avec succ√®s ===")


if __name__ == "__main__":
    success = test_single_file_logging()
    if success:
        print("üéâ Tous les tests ont r√©ussi !")
    else:
        print("‚ùå Certains tests ont √©chou√©.")
